@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section header{   
    <script type="text/javascript">
      $(document).ready(function () {
        $("#accordion").accordion(); 
      });    
    </script>
}

<h2>Index - Mobile</h2>

<div align="center">
  @Html.ActionLink("ex-01", "page01", "Mobile")&nbsp;
  @Html.ActionLink("ex-02", "page02", "Mobile")&nbsp;
  @Html.ActionLink("ex-03", "page03", "Mobile")&nbsp;  
  @Html.ActionLink("ex-04", "page04", "Mobile")&nbsp; 
  @Html.ActionLink("ex-05", "page05", "Mobile")&nbsp;   
  @Html.ActionLink("ex-06", "page06", "Mobile")&nbsp;  
</div>

<br /><br />

<div>
   <p align="justify">
   The example on this page use the same action method as the example (ex-05). The javascript
   framework has been build on 2 level. The core (PagingBase object into file zPageGrid1.js)
   provide the core functionality for query data in 2 way (linq enabled/linq not enabled ).
   There are also 2 plugin that wrap the PagingBase object: 1) for normal web page 2) for 
   mobile page that use jquery mobile. In this way ajax's request call are provided from the
   same base object. Both the example (this page and ex-07) use the same action method.<br />
   </p>    
   <div id="accordion">
     <h3><a href="#">example-01</a></h3>
     <div>
       This is an empty multipage application.
     </div>
     <h3><a href="#">example-02</a></h3>
     <div>
       In this example there are 3 page. The first fetch all data with paging enabled. The second
       fetch only data where country='germany'. The third fetch only data where country='Sweden'.
     </div>
     <h3><a href="#">example-03</a></h3>
     <div>
       In this example there are 3 page. The first is a form-serch page. The second fetch 
       data from the search conditions (on page definition you can see "data-jparam01='#text1'", "data-jparam02='#text2'"
       this tell the framework which are the text field to use for the search).The third is a detail page of the selected item (it not go on db).
       On this page you can see "data-jresturl='none'", this tell to the framework do not sends a rest call,
       it take the current item. The current item is selected/saved when you put "data-jsavecurritem='true'" on 
       the template link. Navigation button have "data-jnavbaraction='<i>action</i>'" that tell the framework which command apply.
     </div>
     <h3><a href="#">example-04</a></h3>
     <div>
       In this example there are 3 page. The first is a form-serch page. The second fetch 
       data from the search conditions (on page definition you can see "data-jparam01='#text1'", "data-jparam02='#text2'"
       this tell the framework which are the text field to use for the search). The third is a detail page of the selected item (it go on db  ).
       On this page you can see "data-jresturl='value'", this tell to the framework to send a rest call,
       it take the current item and then create a param link. On page definition you can see data-jparam01="*City" .
       The current item is selected/saved when you apply "data-jsavecurritem='true'" on the template link.
       Navigation button have "data-jnavbaraction='<i>action</i>'" that tell the framework which command apply.
     </div>  
     <h3><a href="#">example-05</a></h3>
     <div>
       Same as example-04 but it has linq enabled. In the code behind there is an event
       'selecting1' where is specified a query specified.
     </div>
     <h3><a href="#">example-06</a></h3>
     <div>
       Same as example-02 but with "jautorun=false" and it is a single page. In this case the data are not retrived when
       the page is loaded, but when I click the button link "Find", on this link there is the "data-jselectaction='true'" attribute.
     </div>
   </div>    
</div>

<br /><br />

<div>
<table>
<tr>
<td width="200">attribute</td>
<td>description</td>
</tr>

<tr>
<td>data-jlinqenabled</td>
<td>
<div align="justify">
Specify if linq is enabled.
</div>
</td>
</tr>

<tr>
<td>data-jresturl</td>
<td>
<div align="justify">
Specify the url.
</div>
</td>
</tr>

<tr>
<td>data-jpagesize</td>
<td>
<div align="justify">
Specify the pagesize. Optional, if not specified pagesize=9999 and paging is not enabled.
</div>
</td>
</tr>

<tr>
<td>data-jtypetemplate</td>
<td>
<div align="justify">
Specify template's type (client jquery template/ server partialview).
</div>
</td>
</tr>

<tr>
<td>data-jnametemplate</td>
<td>
<div align="justify">
Specify template's name
</div>
</td>
</tr>

<tr>
<td>data-jcontainer</td>
<td>
<div align="justify">
This is the container of the template
</div>
</td>
</tr>

<tr>
<td>data-jparam01/data-jparam05</td>
<td>
<div align="justify">
Specify search's param. There are 3 type of param. 1) value: data-jparam01="germany".
 2) data: data-jparam01="*country" you reference the field "country" of the previous
 page. In this case in the previous page you must have a link with this  attribute 
 data-jsavecurritem="true", this specify to transfer data from origin  and destination 
 page. You create a data link. 3) text: data-jparam01="#filed1" you reference an input
 tag of name "filed1".
 </div>
</td>
</tr>

<tr>
<td>data-jsavecurritem="true"</td>
<td>
<div align="justify">
It must put on a button/link template. It tell the framework that must pass the current
dataitem to the next page. It saves the current item and then pass it  through "changePage"
event of jquery mobile.
</div>
</td>
</tr>

<tr>
<td>data-jautorun="false"</td>
<td>
<div align="justify">
Default behavior is that a query/search begin when you go on a new page. 
On the page definitions tell the framework do not start query/search automaticaly when you
go on a new page. The search start when you press a button/link where there is an attribute
data-jselectaction="true".
</div>
</td>
</tr>

<tr>
<td>data-jselectaction="true"</td>
<td>
<div align="justify">
It must put on a button/link searchform. The plugin register it and when you press the button/link a new 
query/search start. This overrides the default behavior where a new query/search start
when you go on a new page. 
</div>
</td>
</tr>

<tr>
<td>data-jnavbaraction='<i>action</i>'</td>
<td>
<div align="justify">
The param action can be "refresh,pageF,pageP,pageN,pageL". It tells the plugin that
this is a navigation button of the current datasource. 
</div>
</td>
</tr>

<tr>
<td>data-jfselecting</td>
<td>
<div align="justify">
Specify selecting event.
</div>
</td>
</tr>

<tr>
<td>data-jfdatabound</td>
<td>
<div align="justify">
Specify databound event.
</div>
</td>
</tr>

<tr>
<td>data-jfisloading</td>
<td>
<div align="justify">
Specify isloading event.
</div>
</td>
</tr>

</table>
</div>
